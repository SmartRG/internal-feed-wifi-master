Index: hostapd-2021-05-22-b102f19b/hostapd/ctrl_iface.c
===================================================================
--- hostapd-2021-05-22-b102f19b.orig/hostapd/ctrl_iface.c
+++ hostapd-2021-05-22-b102f19b/hostapd/ctrl_iface.c
@@ -1745,6 +1745,21 @@ static int hostapd_ctrl_iface_reload(str
 }
 
 
+static int hostapd_ctrl_iface_trigger_acs(struct hostapd_iface *iface)
+{
+	enum hostapd_chan_status status;
+
+	iface->manual_acs_triggered = true;
+	status = acs_init(iface);
+
+	if (status != HOSTAPD_CHAN_ACS) {
+		wpa_printf(MSG_ERROR, "Triggering of ACS failed (%u)", status);
+		return -1;
+	}
+	return 0;
+}
+
+
 static int hostapd_ctrl_iface_disable(struct hostapd_iface *iface)
 {
 	if (hostapd_disable_iface(iface) < 0) {
@@ -3806,6 +3821,9 @@ static int hostapd_ctrl_iface_receive_pr
 	} else if (os_strncmp(buf, "RELOAD", 6) == 0) {
 		if (hostapd_ctrl_iface_reload(hapd->iface))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "TRIGGER_ACS", 11) == 0) {
+		if (hostapd_ctrl_iface_trigger_acs(hapd->iface))
+			reply_len = -1;
 	} else if (os_strncmp(buf, "DISABLE", 7) == 0) {
 		if (hostapd_ctrl_iface_disable(hapd->iface))
 			reply_len = -1;
Index: hostapd-2021-05-22-b102f19b/hostapd/hostapd_cli.c
===================================================================
--- hostapd-2021-05-22-b102f19b.orig/hostapd/hostapd_cli.c
+++ hostapd-2021-05-22-b102f19b/hostapd/hostapd_cli.c
@@ -1203,6 +1203,12 @@ static int hostapd_cli_cmd_reload(struct
 	return wpa_ctrl_command(ctrl, "RELOAD");
 }
 
+static int hostapd_cli_cmd_trigger_acs(struct wpa_ctrl *ctrl, int argc,
+				      char *argv[])
+{
+	return wpa_ctrl_command(ctrl, "TRIGGER_ACS");
+}
+
 
 static int hostapd_cli_cmd_disable(struct wpa_ctrl *ctrl, int argc,
 				      char *argv[])
@@ -1732,6 +1738,8 @@ static const struct hostapd_cli_cmd host
 	  "<addr> [req_mode=] <measurement request hexdump>  = send a Beacon report request to a station" },
 	{ "reload_wpa_psk", hostapd_cli_cmd_reload_wpa_psk, NULL,
 	  "= reload wpa_psk_file only" },
+	{ "trigger_acs", hostapd_cli_cmd_trigger_acs, NULL,
+	  "= trigger automatic channel selection" },
 #ifdef ANDROID
 	{ "driver", hostapd_cli_cmd_driver, NULL,
 	  "<driver sub command> [<hex formatted data>] = send driver command data" },
Index: hostapd-2021-05-22-b102f19b/hostapd/main.c
===================================================================
--- hostapd-2021-05-22-b102f19b.orig/hostapd/main.c
+++ hostapd-2021-05-22-b102f19b/hostapd/main.c
@@ -284,6 +284,7 @@ hostapd_interface_init(struct hapd_inter
 	}
 
 	iface->interfaces = interfaces;
+	iface->manual_acs_triggered = false;
 
 	for (k = 0; k < debug; k++) {
 		if (iface->bss[0]->conf->logger_stdout_level > 0)
Index: hostapd-2021-05-22-b102f19b/src/ap/hostapd.h
===================================================================
--- hostapd-2021-05-22-b102f19b.orig/src/ap/hostapd.h
+++ hostapd-2021-05-22-b102f19b/src/ap/hostapd.h
@@ -599,6 +599,13 @@ struct hostapd_iface {
 
 	int (*enable_iface_cb)(struct hostapd_iface *iface);
 	int (*disable_iface_cb)(struct hostapd_iface *iface);
+
+	/* 
+	 * If ACS is triggered manually via hostapd_cli, then
+	 * we won't be doing channel change at the end of ACS.
+	 * It will be done via chan_switch later on, if needed.
+	 */
+	bool manual_acs_triggered;
 };
 
 /* hostapd.c */
Index: hostapd-2021-05-22-b102f19b/src/ap/hw_features.c
===================================================================
--- hostapd-2021-05-22-b102f19b.orig/src/ap/hw_features.c
+++ hostapd-2021-05-22-b102f19b/src/ap/hw_features.c
@@ -1037,6 +1037,33 @@ int hostapd_acs_completed(struct hostapd
 		wpa_msg(iface->bss[0]->msg_ctx, MSG_INFO,
 			ACS_EVENT_COMPLETED "freq=%d channel=%d",
 			iface->freq, iface->conf->channel);
+
+		// Record the best channel for later use.
+		{
+			FILE *pFile = NULL;
+			char filename[32];
+			sprintf (filename, "/tmp/hapd_acs_%s", iface->phy);
+			pFile = fopen(filename, "w");
+			if (!pFile) {
+				wpa_printf(MSG_ERROR, "Unable to open %s for writing", filename);
+				break;
+			}
+			fprintf(pFile, "phy=%s\n", iface->phy);
+			fprintf(pFile, "config_fname=%s\n", iface->config_fname);
+			fprintf(pFile, "freq=%d\n", iface->freq);
+			fprintf(pFile, "channel=%d\n", iface->conf->channel);
+			fclose (pFile);
+		}
+
+		// If ACS was triggered manually via hostapd_cli, then
+		// channel change will happen separately via chan_switch.
+		if (iface->manual_acs_triggered == true) {
+			iface->manual_acs_triggered = false;
+			hostapd_set_state(iface, HAPD_IFACE_ENABLED);
+			wpa_msg(iface->bss[0]->msg_ctx, MSG_INFO, AP_EVENT_ENABLED);
+			return 0;
+		}
+
 		break;
 	case HOSTAPD_CHAN_ACS:
 		wpa_printf(MSG_ERROR, "ACS error - reported complete, but no result available");
